how do i identify a property as being of the "entity_selection_array" category?
or even "array to select anything from" category?
maybe make the property a custom type?

{ "name": "unique_name_in_owner"
 "class_name": &""
 "type": 1
 "hint": 0
 "hint_string": ""
 "usage": 2


wip bugs and features
DONE
- bug: drop-down menu resetting on its own -> fixed
- feature: two display modes: drop-down menu and reosurce picker
- feature: both displays update each other
- feature: resource picker only allows values from drop-down
 - bug: drop-down not updating when enemy picked with drag-and-drop -> fixed
- feature: auto-generate drop-down item name list
 - implementation: parse names from file paths
- feature: name array is read-only in editor
- feature: generate preview picture
- implementation: handle null instances (preview generation etc.)
- feature: add and remove items from global array -> names update automatically
- bug: at start-up, when null-element is selected, still an old preview is shown
2024 12 10:
- use for game
- make presentation
- bug: choice is not stored across scene reload

2024 12 11 
- LEAK/style: enemy_picker_plugin: current_value = EnemyChoice.new() # TODO: dont't reallocate

2024 12 12
- made it so changing the array can cause updated visuals

2024 12 18
be able to click the instantiated sprite in the editor
-> by using the group nodes feature


TODO
-update old work logs
-idea 3:
 SceneSelect extends Node
 SceneSelectInspector will still trigger via _parse_property()
 design conflict: 
 make it a Node, to keep it general purpose, as is the intent
 or make it Node2D to allow it to render in the editor?
 -> strategy: go with node2D first to get to results with less complications
 			then try to make it work with Node
 - make it so from parent node with the property we can directly jump to the SceneSelect child-node to edit its list (with the movie-scene icon)
 - handle uninitialized properties
 - redraw the thing to nothing if it's empty
 - restrict available choices to only direct children of the node that has the SceneSelect variable
 -streamline the process of having a SceneSelect resource AND a SceneList resource

-idea 3.2:
 - SceneSelect extends Node
 - SceneSelectInspector will trigger on the SceneSelect object itself, not on the owner
 - the SceneSelect is a Node that presents data in a certain way, 
   similar to how Sprite2D presents a Texture2D in a certain way
 - useability problem: have to edit the child node to change selection,
   means it cannot be changed as imported scene in another scene,
   which defeats the purpose if we want to use a SceneSelect 
   as part of something like an NPC spawner
 - => disqualified for lacking fitness for purpose

idea 4:
 - SceneSelect extends Resource
 - and holds a reference to its owner node
 - the reference is set when the user clicks on the node, 
   because it's set by the InspectorPlugin
 - anticipated issue: duplicating the node holding the resource will both duplicate 
   the resource and the reference
 => result:
 - yes, copying the node leads to all kinds of weird bugs, it works once the user
   makes a new resource and assigns values as needed, which is kind of in line
   with the godot spirit because the same issues happen when we copy things like Area2D
   and then make changes to the Shape2D
 - however, against expectation, the nodes still cannot render on load,
   despite available values
 => discovered 
   scene_instance.owner = Engine.get_main_loop().edited_scene_root
   now i get something i never wanted ... - the instance being persisted in the scene
   -> not using this approach for now
 - seems that the node reference i store is somehow invalid, but no error message
 - when i disable the resetting of the node reference in the property editor, 
   then the object stays invisible.
 - i assume it has to do with trying to store a reference to a scene node in a resource, 
   which lives outside of nodes
 - that means i would need some node in the scene to store the information. 
 - i can instantiate and persist such a node with the owner property, as noted above.
 - but the problem is that the next time i load the scene, i cannot delete the node, 
   as i have no reference to it. which means when the user makes a selection, another node
   will be instantiated without replacing the old one.
 => i declare this attempt to have been proven as not viable for my intended purpose.
	it's okay.
ICED: 
- bug: deleting/changing the currently selected item from global list does not cause update in property
-> iced because not using global list anymore
- bug: „commont parent not found“ -> couldn’t solve it.
-> iced because bug not occuring anymore
