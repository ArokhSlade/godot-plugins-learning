wip bugs and features
DONE
- bug: drop-down menu resetting on its own -> fixed
- feature: two display modes: drop-down menu and reosurce picker
- feature: both displays update each other
- feature: resource picker only allows values from drop-down
 - bug: drop-down not updating when enemy picked with drag-and-drop -> fixed
- feature: auto-generate drop-down item name list
 - implementation: parse names from file paths
- feature: name array is read-only in editor
- feature: generate preview picture
- implementation: handle null instances (preview generation etc.)
- feature: add and remove items from global array -> names update automatically
- bug: at start-up, when null-element is selected, still an old preview is shown

2024 12 10
- use for game
- make presentation
- bug: choice is not stored across scene reload

2024 12 11
- transition from global data to data-from-resource
- working sample

2024 12 12 
- made it so changing the array can cause update to visuals
- BUG(2024 12 12): res://addons/scene-select-plugin/scene_select_property.gd:57 - Invalid access to property or key of type 'StringName' on a base object of type 'Resource (SceneSelect)'.
-> bug happened when i tried addinv my EditorProperty script with add_property_editor_for_multiple_properties(), 
but still was calling get_edited_property(), which according to the docs, only works for single-property-editors
- bug(2024 12 12): scene select ui not showing node preview
-> code was still using old symbol names

2024 12 13:
- try out 2 approaches for property parsing:
-> 1: let _can_handle() detect the SceneSelect, and call add_property_editor_for_multiple_properties() in parse_begin
	  and maybe utilize multiple_properties_changed(properties: PackedStringArray, value: Array)
- bug: the index is stored locally, but then is being forgotten by the time update_ui is called. why?
-> because the property script does get free()d after our even handler finishes, if said handler called emit_changed
-> for some reason, calling emit_changed within our dropdown event handler causes the property to be deleted
-> i tried removing the emit_changed and instead calling _update_property directly, 
   but A) now the user is not notified about the changed and so its eventhandler doesn't cause a re-instantiation
   and B) even so, as soon as i deselect-reselect the node, it will have forgotten its selection.
=> for now, store the selection as an integer...
-> 2: let _can_handle() detect any object, and check _parse_property() for SceneSelect resource, 
	  then add_property_editor(), and make use of the `field` parameter in signal 
	  property_changed(property: StringName, value: Variant, field: StringName, changing: bool)
   -> signal not used yet

TODO

- make property react to changes in the array.
 - check whether our scene still exists, and at the same index
 - always assume the user wants to keep the scene, even if the array and index may changed 
  -> display a warning
  - even if the scene was deleted from the array
   -> display a warning
- bug: deleting a user scene from the tree does not stop it from receiving signals and reacting to them
- make the instantiated sprite clickable to get the object in editor
- make usage simpler, so it's SceneSelect resource + SceneList resource
- clean up ui: label should adhere to same format specs as other inspector fields (it's too long)
-> BUG: tried different ways of trimming the field, from text overrun behavior to changing node type to line edit field
		in all cases, it causes the editor to hang when i widen the inspector tab enough for the full name to show 
		(as soon as the last character would be drawn)
- clean up the ui (hide, read-only, ...)

QUESTIONS:
2024 12 13
why does the property get free()d and re-new()ed after event handler calls emit_changed()?
(it doesn't happen when emit_changed is called within the _init function. which would cause an infinite loop)

ICED:
2024 12 10
- bug: deleting/changing the currently selected item from global list does not cause update in property
-> iced because transition from global data to data-from-resource 
- bug: „commont parent not found“ -> couldn’t solve it.
-> iced because error hasn't occured since design transitioned from global data to data-from-resource


{ "name": "script", "class_name": &"Script", "type": 24, "hint": 17, "hint_string": "Script", "usage": 1048582 }
1048582 = 1048576 + 6
PROPERTY_USAGE_NEVER_DUPLICATE = 1048576
PROPERTY_USAGE_DEFAULT = 6

{ "name": "scene_list.gd", "class_name": &"", "type": 0, "hint": 0, "hint_string": "res://addons/scene-select-plugin/scene_list.gd", "usage": 128 }
PROPERTY_USAGE_CATEGORY = 128

{ "name": "scenes", "class_name": &"", "type": 28, "hint": 23, "hint_string": "24/17:PackedScene", "usage": 4102 }
PROPERTY_USAGE_SCRIPT_VARIABLE 
PROPERTY_USAGE_DEFAULT 

{ "name": "names", "class_name": &"", "type": 28, "hint": 23, "hint_string": "4:", "usage": 268439558 }
268439558 = 268435456 + 4096 + 6
PROPERTY_USAGE_READ_ONLY 
PROPERTY_USAGE_SCRIPT_VARIABLE 
PROPERTY_USAGE_DEFAULT 
